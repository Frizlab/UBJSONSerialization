import XCTest
@testable import UBJSONSerialization



class UBJSONSpec8SerializationTests : XCTestCase {
	
	/* From https://raw.githubusercontent.com/ubjson/universal-binary-json-java/b0f2cbb44ef19357418e41a0813fc498a9eb2779/src/test/resources/org/ubjson/TwitterTimeline.ubj */
	func testDecodeExternalTest1FromGitHub() throws {
		let dataHex = """
			6F157306 69645F73 74727312 31323137 36393138 33383231 33313230 3030730D
			72657477 6565745F 636F756E 74490000 00007317 696E5F72 65706C79 5F746F5F
			73637265 656E5F6E 616D655A 7313696E 5F726570 6C795F74 6F5F7573 65725F69
			645A7309 7472756E 63617465 64467309 72657477 65657465 64467312 706F7373
			69626C79 5F73656E 73697469 76654673 19696E5F 7265706C 795F746F 5F737461
			7475735F 69645F73 74725A73 08656E74 69746965 736F0373 0475726C 736F0473
			0375726C 73146874 74703A5C 5C742E63 6F5C7774 696F4B6B 4653730B 64697370
			6C61795F 75726C73 0D646C76 722E6974 5C705751 79327307 696E6469 63657361
			02490000 00214900 00003573 0C657870 616E6465 645F7572 6C731468 7474703A
			5C5C646C 76722E69 745C7057 51793273 08686173 68746167 73610073 0D757365
			725F6D65 6E74696F 6E736100 73036765 6F5A7305 706C6163 655A730B 636F6F72
			64696E61 7465735A 730A6372 65617465 645F6174 731E5468 75204F63 74203036
			2030323A 31303A31 30202B30 30303020 32303131 7317696E 5F726570 6C795F74
			6F5F7573 65725F69 645F7374 725A7304 75736572 6F267306 69645F73 74727308
			37373032 39303135 73127072 6F66696C 655F6C69 6E6B5F63 6F6C6F72 73063030
			39393939 730A7072 6F746563 74656464 46730375 726C7319 68747470 3A5C5C77
			77772E74 65636864 61792E63 6F2E6E7A 5C730B73 63726565 6E5F6E61 6D657309
			74656368 6461796E 7A730E73 74617475 7365735F 636F756E 74490000 14187311
			70726F66 696C655F 696D6167 655F7572 6C734368 7474703A 5C5C6130 2E747769
			6D672E63 6F6D5C70 726F6669 6C655F69 6D616765 735C3134 37393035 38343038
			5C746563 68646179 5F34385F 6E6F726D 616C2E6A 70677304 6E616D65 73075465
			63684461 79731564 65666175 6C745F70 726F6669 6C655F69 6D616765 46730F64
			65666175 6C745F70 726F6669 6C654673 1870726F 66696C65 5F626163 6B67726F
			756E645F 636F6C6F 72730631 33313531 3673046C 616E6773 02656E73 1770726F
			66696C65 5F626163 6B67726F 756E645F 74696C65 46730A75 74635F6F 66667365
			74490000 A8C0730B 64657363 72697074 696F6E73 00730D69 735F7472 616E736C
			61746F72 46731573 686F775F 616C6C5F 696E6C69 6E655F6D 65646961 46731463
			6F6E7472 69627574 6F72735F 656E6162 6C656446 73227072 6F66696C 655F6261
			636B6772 6F756E64 5F696D61 67655F75 726C5F68 74747073 734F6874 7470733A
			5C5C7369 302E7477 696D672E 636F6D5C 70726F66 696C655F 6261636B 67726F75
			6E645F69 6D616765 735C3735 38393339 34385C54 65636864 61795F42 61636B67
			726F756E 642E6A70 67730A63 72656174 65645F61 74731E54 68752053 65702032
			34203230 3A30323A 3031202B 30303030 20323030 39731A70 726F6669 6C655F73
			69646562 61725F66 696C6C5F 636F6C6F 72730665 66656665 66731366 6F6C6C6F
			775F7265 71756573 745F7365 6E744673 0D667269 656E6473 5F636F75 6E744900
			000C8F73 0F666F6C 6C6F7765 72735F63 6F756E74 4900000C 4D730974 696D655F
			7A6F6E65 73084175 636B6C61 6E647310 6661766F 75726974 65735F63 6F756E74
			49000000 00731C70 726F6669 6C655F73 69646562 61725F62 6F726465 725F636F
			6C6F7273 06656565 65656573 1770726F 66696C65 5F696D61 67655F75 726C5F68
			74747073 73456874 7470733A 5C5C7369 302E7477 696D672E 636F6D5C 70726F66
			696C655F 696D6167 65735C31 34373930 35383430 385C7465 63686461 795F3438
			5F6E6F72 6D616C2E 6A706773 09666F6C 6C6F7769 6E674673 0B67656F 5F656E61
			626C6564 46730D6E 6F746966 69636174 696F6E73 46731C70 726F6669 6C655F75
			73655F62 61636B67 726F756E 645F696D 61676554 730C6C69 73746564 5F636F75
			6E744900 00009773 08766572 69666965 64467312 70726F66 696C655F 74657874
			5F636F6C 6F727306 33333333 33337308 6C6F6361 74696F6E 7316506F 6E736F6E
			62792C20 4175636B 6C616E64 2C204E5A 73026964 4904975E 97731C70 726F6669
			6C655F62 61636B67 726F756E 645F696D 6167655F 75726C73 4D687474 703A5C5C
			61302E74 77696D67 2E636F6D 5C70726F 66696C65 5F626163 6B67726F 756E645F
			696D6167 65735C37 35383933 3934385C 54656368 6461795F 4261636B 67726F75
			6E642E6A 7067730C 636F6E74 72696275 746F7273 5A730673 6F757263 6573333C
			61206872 65663D22 68747470 3A5C5C64 6C76722E 69742220 72656C3D 226E6F66
			6F6C6C6F 77223E64 6C76722E 69743C5C 613E7315 696E5F72 65706C79 5F746F5F
			73746174 75735F69 645A7309 6661766F 72697465 64467302 69644C01 B09C6D72
			42300073 04746578 74733541 70706C65 2043454F 2773206D 65737361 67652074
			6F20656D 706C6F79 65657320 68747470 3A5C5C74 2E636F5C 7774696F 4B6B4653
			"""
		let ref: [String: AnyHashable?] = [
			"id_str": "121769183821312000",
			"retweet_count": 0,
			"in_reply_to_screen_name": nil,
			"in_reply_to_user_id": nil,
			"truncated": false,
			"retweeted": false,
			"possibly_sensitive": false,
			"in_reply_to_status_id_str": nil,
			"entities": [
				"urls": [
					"url": #"http:\\t.co\wtioKkFS"#,
					"display_url": #"dlvr.it\pWQy2"#,
					"indices": [33, 53],
					"expanded_url": #"http:\\dlvr.it\pWQy2"#
				] as [String: AnyHashable?],
				"hashtags": [AnyHashable?](),
				"user_mentions": [AnyHashable?]()
			] as [String: AnyHashable?],
			"geo": nil,
			"place": nil,
			"coordinates": nil,
			"created_at": "Thu Oct 06 02:10:10 +0000 2011",
			"in_reply_to_user_id_str": nil,
			"user": [
				"id_str": "77029015",
				"profile_link_color": "009999",
				"protectedd": false,
				"url": #"http:\\www.techday.co.nz\"#,
				"screen_name": "techdaynz",
				"statuses_count": 5144,
				"profile_image_url": #"http:\\a0.twimg.com\profile_images\1479058408\techday_48_normal.jpg"#,
				"name": "TechDay",
				"default_profile_image": false,
				"default_profile": false,
				"profile_background_color": "131516",
				"lang": "en",
				"profile_background_tile": false,
				"utc_offset": 43200,
				"description": "",
				"is_translator": false,
				"show_all_inline_media": false,
				"contributors_enabled": false,
				"profile_background_image_url_https": #"https:\\si0.twimg.com\profile_background_images\75893948\Techday_Background.jpg"#,
				"created_at": "Thu Sep 24 20:02:01 +0000 2009",
				"profile_sidebar_fill_color": "efefef",
				"follow_request_sent": false,
				"friends_count": 3215,
				"followers_count": 3149,
				"time_zone": "Auckland",
				"favourites_count": 0,
				"profile_sidebar_border_color": "eeeeee",
				"profile_image_url_https": #"https:\\si0.twimg.com\profile_images\1479058408\techday_48_normal.jpg"#,
				"following": false,
				"geo_enabled": false,
				"notifications": false,
				"profile_use_background_image": true,
				"listed_count": 151,
				"verified": false,
				"profile_text_color": "333333",
				"location": "Ponsonby, Auckland, NZ",
				"id": 77029015,
				"profile_background_image_url": #"http:\\a0.twimg.com\profile_background_images\75893948\Techday_Background.jpg"#
			] as [String: AnyHashable?],
			"contributors": nil,
			"source": #"<a href="http:\\dlvr.it" rel="nofollow">dlvr.it<\a>"#,
			"in_reply_to_status_id": nil,
			"favorited": false,
			"id": 121769183821312000,
			"text": #"Apple CEO's message to employees http:\\t.co\wtioKkFS"#
		]
		let data = Data(hexEncoded: dataHex)!
		let decoded = try UBJSONSpec8Serialization.ubjsonObject(with: data)
		/* Interesting note: Comparing decoded with ref returns true, but comparing the other way around (areUBJSONDocEqual(ref, decoded)) does not work.
		 * The reason is ref contains only AnyHashable values, and apparently, AnyHashable(0) as? Bool returns true
		 * (actually it does not, but it is something along those lines; to be tested more thoroughly but it is certain the problem comes from there).
		 * And thus, for the key retweet_count, the method that compare the UBJSON docs thinks the value is a bool, and says the docs are not equal because the decoded UBJSON contains an Int. */
		XCTAssertTrue(try UBJSONSpec8Serialization.areUBJSONDocEqual(decoded, ref))
	}
	
	/* From https://github.com/ubjson/universal-binary-json-java/raw/baa5ccb6395e8a63cb03e604fc50c68420b90ca9/src/test/resources/org/ubjson/CouchDB4k.ubj
	 * and  https://github.com/ubjson/universal-binary-json-java/raw/baa5ccb6395e8a63cb03e604fc50c68420b90ca9/src/test/resources/org/ubjson/CouchDB4k.formatted.json
	 * The ref (JSON) had to be fixed because it was not the JSON representation of the UBJSON documentâ€¦ */
	func testDecodeExternalTest2FromGitHub() throws {
		let dataHex = """
			6F097305 64617461 33735E43 6F6C7265 55484174 75596F55 4F78314E 345A6C6F
			6F755174 326F3675 676E5554 36655974 53313067 75376E69 4D386930 7645694E
			7566706B 31526C4D 51586148 586C4977 51424473 4D464446 55516346 65673276
			57356544 32353958 6D730564 61746134 736E7A43 7872694A 684C3732 36574E4E
			54644A4A 7A757267 53413876 4B543672 48413063 46436239 6B6F5A63 4C554D58
			6734726D 6F585650 71494857 59614356 306F766C 32743678 6D374931 486D3336
			6A58704C 6C584562 38665266 62774265 54573256 304F4173 56715948 38654154
			73056461 74613073 3C394556 71486D35 41527163 4542356A 71324431 34553262
			434A5079 4259304A 57447231 546A6838 67544230 7357554E 6A715969 57447846
			7A6C7836 53730564 61746137 73644269 31756A63 67457666 41446642 65795A75
			6445376E 77786333 496B3871 70596A73 4A49664B 6D774F4D 45625632 4C334269
			30783274 63527047 75663466 69797649 62797044 764A4E31 50506451 74665157
			31477636 7A636358 4877775A 774B7A55 71367305 64617461 356F0573 08696E74
			65676572 73611049 000B8B1D 490001C5 9549000B D8BA4900 04326549 000ABBD7
			490000C3 EC49000A 76EB4900 0241F649 000E5EB3 49000DD1 B3490000 E0174900
			08174849 0004C638 49000B4E 5749000F 17134900 06DE6A73 06666C6F 61743164
			429924DD 7306666C 6F617432 6442A70F 4F73076E 65737465 64316F02 7308696E
			74656765 72736110 49000B8B 1D490001 C5954900 0BD8BA49 00043265 49000ABB
			D7490000 C3EC4900 0A76EB49 000241F6 49000E5E B349000D D1B34900 00E01749
			00081748 490004C6 3849000B 4E574900 0F171349 0006DE6A 7306666C 6F617473
			6166644C 247EF264 4CBDB200 644BFB5A D8644B8A 444D644C 2F119064 4C70866A
			644C83AB 1B644A64 C5E7644C 8FE8BF64 4C0D91BA 644CA1D7 E7644BFB 0E3F644B
			CE344864 4C73A942 644C1674 06644CB9 59A3644C B9D94664 4C3DB28B 644C1BB5
			E3644C1D FD26644B BD2E4564 4A2C1035 644CA0B8 83644C8E 1A88644C 818ED664
			4A913A88 644C8F7C 22644C92 C39D644C 8A515064 4CB39C06 644C90BC 47644BD0
			F7C4644C 5D340164 499E919A 644B5EA2 97644C2C C6AE644A 4B611964 4C4D2B9A
			644BC036 BB644C9B 5DE9644C 82B6E864 4C8CCCED 644C5C3E EC644C0E 4DDA644B
			99007264 4BE2F26C 644CA4EC 85644C2C 657B644C 27E15C64 49E34787 644B5EB7
			13644CA7 74C7644C 5C5EC464 4B8B8AF5 644C2F11 90644C70 866A644C 83AB1B64
			4A64C5E7 644C8FE8 BF644C0D 91BA644C A1D7E764 4BFB0E3F 644BCE34 48644C73
			A942644C 16740664 4CB959A3 644CB9D9 46644C3D B28B644C 1BB5E364 4C1DFD26
			644BBD2E 45644A2C 1035644C A0B88364 4C8E1A88 644C818E D6644A91 3A88644C
			8F7C2264 4C92C39D 644C8A51 50644CB3 9C06644C 90BC4764 4BD0F7C4 644C5D34
			0164499E 919A644C 9A39D664 4CBB6B9E 644C44E3 33644BFE CE1A644C 09ABCE64
			4C3F5CF3 644B8092 45644C69 5A36644C A4BFF264 4C8B40EF 644AE1BF 6D644C03
			042A644C BB932D64 4CB545D2 644C2B06 54644C42 C071644B AD556E64 4C77828B
			73076E65 73746564 326F0373 08696E74 65676572 73611049 000B8B1D 490001C5
			9549000B D8BA4900 04326549 000ABBD7 490000C3 EC49000A 76EB4900 0241F649
			000E5EB3 49000DD1 B3490000 E0174900 08174849 0004C638 49000B4E 5749000F
			17134900 06DE6A73 06666C6F 61743164 429924DD 7306666C 6F617432 6442A70F
			4F730773 7472696E 6773610C 73326564 7835587A 526B5056 65455732 4D42517A
			514D6355 53754D49 34466E74 6A686C4A 39564768 51614248 4B504561 7A416154
			730C3266 5155627A 52556178 34417332 6A555263 425A3076 724A636D 6632726F
			5A554D7A 5A4A516F 54734B5A 4449646A 374B684F 37697473 6B4B764D 38306A42
			55397332 386A4B4C 6D6F334E 327A5964 4B795479 6654637A 66723278 36625061
			61726F72 6C6E544E 4A377238 6C496B69 5A794276 7250731E 6A625565 41564F64
			4253507A 596D5968 48307361 62554855 4833394F 35657332 49387941 514B5A73
			795A684D 66707A57 6A417251 55397051 36506655 36623134 71326557 76516A74
			43556467 41557846 6A677321 39374E38 5A6D4763 78525A4F 345A6162 7A525263
			59344B56 4871784A 77513871 59731430 44745931 6157586D 55664A45 4E743972
			59573973 32447470 42554570 7050774D 6E576578 69386549 49786C58 524F3347
			55705067 654E4647 394F4E70 574A5976 6B387842 6B566A73 32597358 38563278
			4F725477 364C684E 494D4D68 4F344634 56584679 58555846 7236364C 3373546B
			4C576746 41394E5A 75425673 14664B59 59746876 38694676 61596F46 6F595A79
			42732D7A 47754C73 50586F4A 714D624F 34506365 5074655A 66444D59 46586457
			74764E46 38577661 706C5879 70736436 73056461 74613173 64394556 71486D35
			41527163 4542356A 71323176 3267306A 56634739 43584230 41626B37 75414634
			4E485979 547A6546 33546E48 68705A42 45434431 34553262 434A5079 4259304A
			57447231 546A6838 67544230 7357554E 6A715969 57447846 7A6C7836 53730969
			6E746567 65727332 61104900 0B8B1D49 0001C595 49000BD8 BA490004 32654900
			0ABBD749 0000C3EC 49000A76 EB490002 41F64900 0E5EB349 000DD1B3 490000E0
			17490008 17484900 04C63849 000B4E57 49000F17 13490006 DE6A730A 6D6F7265
			4E657374 65646F05 7308696E 74656765 72736110 49000B8B 1D490001 C5954900
			0BD8BA49 00043265 49000ABB D7490000 C3EC4900 0A76EB49 000241F6 49000E5E
			B349000D D1B34900 00E01749 00081748 490004C6 3849000B 4E574900 0F171349
			0006DE6A 7306666C 6F617431 64429924 DD730666 6C6F6174 326442A7 0F4F7307
			6E657374 6564316F 01730869 6E746567 65727361 1049000B 8B1D4900 01C59549
			000BD8BA 49000432 6549000A BBD74900 00C3EC49 000A76EB 49000241 F649000E
			5EB34900 0DD1B349 0000E017 49000817 48490004 C6384900 0B4E5749 000F1713
			490006DE 6A73076E 65737465 64326F02 73077374 72696E67 73610B73 0C326651
			55627A52 55617834 4173326A 55526342 5A307672 4A636D66 32726F5A 554D7A5A
			4A516F54 734B5A44 49646A37 4B684F37 6974736B 4B764D38 306A4255 39733238
			6A4B4C6D 6F334E32 7A59644B 79547966 54637A66 72327836 62506161 726F726C
			6E544E4A 3772386C 496B695A 79427672 50731E6A 62556541 564F6442 53507A59
			6D596848 30736162 55485548 33394F35 65733249 38794151 4B5A7379 5A684D66
			707A576A 41725155 39705136 50665536 62313471 32655776 516A7443 55646741
			5578466A 67732139 374E385A 6D476378 525A4F34 5A61627A 52526359 344B5648
			71784A77 51387159 73143044 74593161 57586D55 664A454E 74397259 57397332
			44747042 55457070 50774D6E 57657869 38654949 786C5852 4F334755 70506765
			4E464739 4F4E7057 4A59766B 3878426B 566A7332 59735838 5632784F 72547736
			4C684E49 4D4D684F 34463456 58467958 55584672 36364C33 73546B4C 57674641
			394E5A75 42567314 664B5959 74687638 69467661 596F466F 595A7942 732D7A47
			754C7350 586F4A71 4D624F34 50636550 74655A66 444D5946 58645774 764E4638
			57766170 6C587970 73643673 08696E74 65676572 73610949 000B8B1D 490001C5
			9549000B D8BA4900 00E01749 00081748 490004C6 3849000B 4E574900 0F171349
			0006DE6A
			"""
		let refJSON = #"""
			{
				"data3":"ColreUHAtuYoUOx1N4ZloouQt2o6ugnUT6eYtS10gu7niM8i0vEiNufpk1RlMQXaHXlIwQBDsMFDFUQcFeg2vW5eD259Xm",
				"data4":"zCxriJhL726WNNTdJJzurgSA8vKT6rHA0cFCb9koZcLUMXg4rmoXVPqIHWYaCV0ovl2t6xm7I1Hm36jXpLlXEb8fRfbwBeTW2V0OAsVqYH8eAT",
				"data0":"9EVqHm5ARqcEB5jq2D14U2bCJPyBY0JWDr1Tjh8gTB0sWUNjqYiWDxFzlx6S",
				"data7":"Bi1ujcgEvfADfBeyZudE7nwxc3Ik8qpYjsJIfKmwOMEbV2L3Bi0x2tcRpGuf4fiyvIbypDvJN1PPdQtfQW1Gv6zccXHwwZwKzUq6",
				"data5":{
					"integers":[
						756509,
						116117,
						776378,
						275045,
						703447,
						50156,
						685803,
						147958,
						941747,
						905651,
						57367,
						530248,
						312888,
						740951,
						988947,
						450154
					],
					"float1":76.572,
					"float2":83.5299,
					"nested1":{
						"integers":[
							756509,
							116117,
							776378,
							275045,
							703447,
							50156,
							685803,
							147958,
							941747,
							905651,
							57367,
							530248,
							312888,
							740951,
							988947,
							450154
						],
						"floats":[
							43121609.5543,
							99454976.3019,
							32945584.756,
							18122905.9212,
							45893183.44,
							63052200.6225,
							69032152.6897,
							3748217.6946,
							75449850.474,
							37111527.415,
							84852536.859,
							32906366.487,
							27027600.417,
							63874310.5614,
							39440408.51,
							97176857.1716,
							97438252.1171,
							49728043.5056,
							40818570.245,
							41415831.8949,
							24796297.4251,
							2819085.3449,
							84263963.4848,
							74503228.6878,
							67925677.403,
							4758851.9417,
							75227407.9214,
							76946667.8403,
							72518275.9469,
							94167085.9588,
							75883067.8321,
							27389831.6101,
							57987075.5053,
							1298995.2674,
							14590614.6939,
							45292214.2242,
							3332166.364,
							53784167.729,
							25193846.1867,
							81456965.477,
							68532032.39,
							73820009.7952,
							57736110.5717,
							37304166.7363,
							20054244.864,
							29746392.7397,
							86467624.6,
							45192685.8793,
							44008816.5186,
							1861872.8736,
							14595859.467,
							87795257.6703,
							57768720.8303,
							18290154.3126,
							45893183.44,
							63052200.6225,
							69032152.6897,
							3748217.6946,
							75449850.474,
							37111527.415,
							84852536.859,
							32906366.487,
							27027600.417,
							63874310.5614,
							39440408.51,
							97176857.1716,
							97438252.1171,
							49728043.5056,
							40818570.245,
							41415831.8949,
							24796297.4251,
							2819085.3449,
							84263963.4848,
							74503228.6878,
							67925677.403,
							4758851.9417,
							75227407.9214,
							76946667.8403,
							72518275.9469,
							94167085.9588,
							75883067.8321,
							27389831.6101,
							57987075.5053,
							1298995.2674,
							80858801.2712,
							98262252.4656,
							51612877.944,
							33397812.7835,
							36089655.3049,
							50164685.8153,
							16852105.5192,
							61171929.752,
							86376339.7175,
							73009014.5521,
							7397302.331,
							34345128.9589,
							98343269.4418,
							95039116.9058,
							44833102.5752,
							51052997.8873,
							22719195.6783,
							64883244.8699
						]
					},
					"nested2":{
						"integers":[
							756509,
							116117,
							776378,
							275045,
							703447,
							50156,
							685803,
							147958,
							941747,
							905651,
							57367,
							530248,
							312888,
							740951,
							988947,
							450154
						],
						"float1":76.572,
						"float2":83.5299
					}
				},
				"strings":[
					"edx5XzRkPVeEW2MBQzQMcUSuMI4FntjhlJ9VGhQaBHKPEazAaT",
					"2fQUbzRUax4A",
					"jURcBZ0vrJcmf2roZUMzZJQoTsKZDIdj7KhO7itskKvM80jBU9",
					"8jKLmo3N2zYdKyTyfTczfr2x6bPaarorlnTNJ7r8lIkiZyBvrP",
					"jbUeAVOdBSPzYmYhH0sabUHUH39O5e",
					"I8yAQKZsyZhMfpzWjArQU9pQ6PfU6b14q2eWvQjtCUdgAUxFjg",
					"97N8ZmGcxRZO4ZabzRRcY4KVHqxJwQ8qY",
					"0DtY1aWXmUfJENt9rYW9",
					"DtpBUEppPwMnWexi8eIIxlXRO3GUpPgeNFG9ONpWJYvk8xBkVj",
					"YsX8V2xOrTw6LhNIMMhO4F4VXFyXUXFr66L3sTkLWgFA9NZuBV",
					"fKYYthv8iFvaYoFoYZyB",
					"zGuLsPXoJqMbO4PcePteZfDMYFXdWtvNF8WvaplXypsd6"
				],
				"data1":"9EVqHm5ARqcEB5jq21v2g0jVcG9CXB0Abk7uAF4NHYyTzeF3TnHhpZBECD14U2bCJPyBY0JWDr1Tjh8gTB0sWUNjqYiWDxFzlx6S",
				"integers2":[
					756509,
					116117,
					776378,
					275045,
					703447,
					50156,
					685803,
					147958,
					941747,
					905651,
					57367,
					530248,
					312888,
					740951,
					988947,
					450154
				],
				"moreNested":{
					"integers":[
						756509,
						116117,
						776378,
						275045,
						703447,
						50156,
						685803,
						147958,
						941747,
						905651,
						57367,
						530248,
						312888,
						740951,
						988947,
						450154
					],
					"float1":76.572,
					"float2":83.5299,
					"nested1":{
						"integers":[
							756509,
							116117,
							776378,
							275045,
							703447,
							50156,
							685803,
							147958,
							941747,
							905651,
							57367,
							530248,
							312888,
							740951,
							988947,
							450154
						]
					},
					"nested2":{
						"strings":[
							"2fQUbzRUax4A",
							"jURcBZ0vrJcmf2roZUMzZJQoTsKZDIdj7KhO7itskKvM80jBU9",
							"8jKLmo3N2zYdKyTyfTczfr2x6bPaarorlnTNJ7r8lIkiZyBvrP",
							"jbUeAVOdBSPzYmYhH0sabUHUH39O5e",
							"I8yAQKZsyZhMfpzWjArQU9pQ6PfU6b14q2eWvQjtCUdgAUxFjg",
							"97N8ZmGcxRZO4ZabzRRcY4KVHqxJwQ8qY",
							"0DtY1aWXmUfJENt9rYW9",
							"DtpBUEppPwMnWexi8eIIxlXRO3GUpPgeNFG9ONpWJYvk8xBkVj",
							"YsX8V2xOrTw6LhNIMMhO4F4VXFyXUXFr66L3sTkLWgFA9NZuBV",
							"fKYYthv8iFvaYoFoYZyB",
							"zGuLsPXoJqMbO4PcePteZfDMYFXdWtvNF8WvaplXypsd6"
						],
						"integers":[
							756509,
							116117,
							776378,
							57367,
							530248,
							312888,
							740951,
							988947,
							450154
						]
					}
				}
			}
			"""#
		let refData = Data(refJSON.utf8)
		let data = Data(hexEncoded: dataHex)!
		let refWithDoubles = try JSONSerialization.jsonObject(with: refData, options: []) as! [String: Any?]
		let ref = refWithDoubles.mapValues(transformDoublesToFloatsAndIntsAndNullToNil)
		let decoded = try UBJSONSpec8Serialization.ubjsonObject(with: data)
		XCTAssertTrue(try UBJSONSpec8Serialization.areUBJSONDocEqual(decoded, ref))
	}
	
	/* From https://github.com/ubjson/universal-binary-json-java/raw/5062ff3008c30c1b61ebd758cbc322bc1f60f33a/src/test/resources/org/ubjson/MediaContent.ubj
	 * and  https://github.com/ubjson/universal-binary-json-java/raw/baa5ccb6395e8a63cb03e604fc50c68420b90ca9/src/test/resources/org/ubjson/MediaContent.formatted.json
	 * The ref (JSON) had to be fixed because it was not the JSON representation of the UBJSON documentâ€¦ */
	func testDecodeExternalTest3FromGitHub() throws {
		let dataHex = """
			6F027305 4D656469 616F0B73 03757269 731E6874 74703A2F 2F6A6176 616F6E65
			2E636F6D 2F6B6579 6E6F7465 2E6D7067 73057469 746C6573 0F4A6176 616F6E65
			204B6579 6E6F7465 73057769 64746849 00000280 73066865 69676874 49000001
			E0730666 6F726D61 74730A76 6964656F 2F6D7067 34730864 75726174 696F6E49
			0112A880 73047369 7A654903 84000073 07626974 72617465 49000400 00730770
			6572736F 6E736102 730A4269 6C6C2047 61746573 730A5374 65766520 4A6F6273
			7306706C 61796572 73044A41 56417309 636F7079 72696768 745A7306 496D6167
			65736102 6F057303 75726973 24687474 703A2F2F 6A617661 6F6E652E 636F6D2F
			6B65796E 6F74655F 6C617267 652E6A70 67730574 69746C65 730F4A61 76616F6E
			65204B65 796E6F74 65730577 69647468 49000004 00730668 65696768 74490000
			03007304 73697A65 73054C41 5247456F 05730375 72697324 68747470 3A2F2F6A
			6176616F 6E652E63 6F6D2F6B 65796E6F 74655F73 6D616C6C 2E6A7067 73057469
			746C6573 0F4A6176 616F6E65 204B6579 6E6F7465 73057769 64746849 00000140
			73066865 69676874 49000000 F0730473 697A6573 05534D41 4C4C
			"""
		let refJSON = #"""
			{
				"Media":{
					"uri":"http://javaone.com/keynote.mpg",
					"title":"Javaone Keynote",
					"width":640,
					"height":480,
					"format":"video/mpg4",
					"duration":18000000,
					"size":58982400,
					"bitrate":262144,
					"persons":[
						"Bill Gates",
						"Steve Jobs"
					],
					"player":"JAVA",
					"copyright":null
				},
				"Images":[
					{
						"uri":"http://javaone.com/keynote_large.jpg",
						"title":"Javaone Keynote",
						"width":1024,
						"height":768,
						"size":"LARGE"
					},
					{
						"uri":"http://javaone.com/keynote_small.jpg",
						"title":"Javaone Keynote",
						"width":320,
						"height":240,
						"size":"SMALL"
					}
				]
			}
			"""#
		let refData = Data(refJSON.utf8)
		let data = Data(hexEncoded: dataHex)!
		let refWithDoubles = try JSONSerialization.jsonObject(with: refData, options: []) as! [String: Any?]
		let ref = refWithDoubles.mapValues(transformDoublesToFloatsAndIntsAndNullToNil)
		let decoded = try UBJSONSpec8Serialization.ubjsonObject(with: data)
		XCTAssertTrue(try UBJSONSpec8Serialization.areUBJSONDocEqual(decoded, ref))
	}
	
	private func transformDoublesToFloatsAndIntsAndNullToNil(_ v: Any?) -> Any? {
		switch v {
			case _ as NSNull: return nil /* For Linux; works on macOS without it */
			case let d as Double:         return isDecimalWhole(Decimal(d)) ? Int(d) : Float(d)
			case let a as [Any?]:         return a.map(transformDoublesToFloatsAndIntsAndNullToNil)
			case let d as [String: Any?]: return d.mapValues(transformDoublesToFloatsAndIntsAndNullToNil)
			default: return v
		}
	}
	
	/* From BMO. */
	private func isDecimalWhole(_ d: Decimal) -> Bool {
		guard !d.isZero else {return true}
		guard d.isNormal else {return false}
		
		var d = d
		var rounded = Decimal()
		NSDecimalRound(&rounded, &d, 0, .plain)
		return d == rounded
	}
	
}
